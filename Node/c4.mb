
# 第四章 基本TCP套接字编程

**1.socket 函数**

为了执行网络I/O，一个进程必须做的第一件事就是调用socket函数，指定期望的通信协议类型

```c
#include<sys/socket.h>
int socket(int family, int type,int protocol);//返回：若成功则为非负描述符，若出错则为-1
```

socket函数在成功时返回一个小的非负整数值，它与文件描述符类似，我们把它称为套接字描述符，简称sockfd。为了得到这个套接字描述符，我们只是指定了协议族和套接字类型。我们**并没有指定本地协议地址或远程协议地址**。

family参数指明协议族，type参数指明套接字类型，protocol参数应设为某个协议类型常值，或设为0，以选择所给定family和type组合的系统默认值。

|  family  |      说明      |
| :------: | :------------: |
| AF_INET  |    Ipv4协议    |
| AF_INET6 |    Ipv6协议    |
| AF_LOCAL |   Unix域协议   |
| AF_ROUTE | 路由套接字协议 |
|  AF_KEY  |   密钥套接字   |

|      type      |      说明      |
| :------------: | :------------: |
|  SOCK_STREAM   |  字节流套接字  |
|   SOCK_DGRAM   |  数据报套接字  |
| SOCK_SEQPACKEY | 有序分组套接字 |
|    SOCK_RAW    |   原始套接字   |

|   protocol   |     说明     |
| :----------: | :----------: |
| IPPROTO_TCP  | TCP传输协议  |
| IPPROTO_UDP  | UDP传输协议  |
| IPPROTO_SCTP | SCTP传输协议 |

**2.connect函数**

TCP客户用connect函数来建立与TCP服务器的连接。

```c
#include<sys/socket.h>
int connect(int sockfd,const struct sockaddr *servaddr,socklen_t addrlen);
//返回：若成功则为0，若出错则为-1
```

sockfd是由socket函数返回的套接字描述符，第二个，第三个参数分别是一个指向套接字地址结构的指针和该结构的大小。**套接字地址结构必须含有服务器的IP地址和端口号**。

客户在调用函数connect前不必非得调用函数，因为如果需要的话，内核会确定源IP地址，并选择一个临时端口作为端口号。

若为TCP套接字，调用connect 函数将激发TCP的三路握手过程，而且仅在连接建立成功或出错时才返回。

其中的出错返回可能有以下几种情况:

 * 若TCP客户没有收到SYN分节的响应，则返回ETIMEDOUT错误。
* 若对客户的SYN的响应是RST(表示复位),则表明该服务器主机在我们所指定的端口上没有进程在等待与之连接，收到RST马上返回ECONNREFUSED错误。这是一种硬错误
* 若客户发出的SYN在中间的某个路由器上引发了一个"destination unreachable"目的地不可达ICMP错误。客户主机内核保存该消息后，并按第一种情况中所述的时间间隔继续发送SYN。若在某个规定时间后仍然未收到响应，则把保存的消息作为EHOSTUNREACH或ENETUNREACH错误返回给进程。

**3.bind函数**

bind函数把一个本地协议地址赋予一个套接字。对于网际网协议，协议地址是32位的IPv4地址或128位的IPv6地址与16位的TCP或UDP端口号的组合。

```c
#include<sys/socket.h>
int bind(int sockfd,const struct sockaddr*myaddr,socklen_t addrlen);
//返回：若成功则为0，若出错则为-1

//example
struct sockaddr_in servaddr;
listenfd = socket(AF_INET,SOCK_STREAM,0);
bzero(&servaddr,sizeof(servaddr));
servaddr.sin_family = AF_INET;
servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
servaddr.sin_port = htons(13);
bind(listenfd,(struct sockaddr*)&servaddr,sizeof(servaddr));
```

第二个参数是一个指向特定于协议的地址结构的指针，第三个参数是该地址结构的长度。对于TCP，调用bind函数可以指定一个端口号或指定一个IP地址，也可以两者都指定，还可以都不指定。

* 服务器在启动时通常会绑定它们的众所周知端口。若一个TCP客户或服务器未曾调用bind绑定一个端口，当调用connect或listen时，内核就要为相应的套接字选择一个临时端口。

* 进程可以把一个特定的IP地址绑定到它的套接字上，不过这个**IP地址必须属于其所在主机的网络接口之一**。

  对于TCP客户端，这就为在该套接字上**发送的IP数据报指派了源IP地址**。

  对于TCP服务器，这就限定该套接字**只接收那些目的地为这个IP地址的客户连接**。

  TCP客户端通常不把IP地址绑定到它的套接字上。当连接套接字时，**内核**将**根据所用外出网络接口**来**选择源IP地址**。

  若TCP服务器没有把IP地址绑定到它的套接字上，内核就把客户发送的SYN的目的IP地址作为服务器的源IP地址。

![](C:\Users\dell\Desktop\捕获g.PNG)

___



对于IPv4来说，通配地址由常量INADDR_ANY来指定，其值一般为0。他告知内核去选择IP地址

```c
struct sockaddr_in servaddr;
servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
```

  对于IPv6来说

```c
struct sockaddr_in6 serv;
serv.sin6_addr = in6addr_any;
```

注意如果让内核来为套接字选择一个临时端口号，那么必须注意，函数bind并不返回所选择的值。实际上由于bind函数的第二个参数有const限定词，它无法返回所选之值为了得到内核所选择的这个临时端口值，必须调用getsockname来返回协议地址。

​	

**4.listen函数**

listen函数仅由TCP服务器调用，它做两件事。

(1) listen函数把一个未连接的套接字转换成一个被动套接字，指示内核应接受指向该套接字的连接请求。

(2) 本函数的第二个参数规定了内核应该为相应套接字排队的最大连接个数。

```c
#include<sys/socket.h>
int listen(int sockfd,int backlog);
//返回: 若成功则为0，若出错则为-1
```

理解backlog参数，我们必须认识到内核为**任何一个给定的监听套接字维护两个队列**

 *  未完成连接队列，这些套接字处于SYN_RCVD状态。 
 *  已完成连接队列，这些套接字处于ESTABLISHED状态。

当三路握手完成时，该项就从未完成连接队列移到已完成连接队列的队尾。当进程调用accept时，已完成连接队列中的队头项将返回给进程，或者如果该队列为空，那么进程将被投入睡眠，直到TCP在该队列中放入一项才唤醒它。

注意不要把backlog的值设为0，因为不同的实现对此有不同的解释。



**5.accept函数**

   accept函数由TCP服务器调用，用于从已完成连接队列队头返回下一个已完成的连接。如果已完成连接队列为空，那么进程将被投入睡眠。

```c
#include <sys/socket.h>
socklen_t len;
struct sockadddr_in cliaddr;
len=sizeof(cliaddr);
int accept(int sockfd, struct sockaddr *cliaddr,socklen_t *addrlen);
//返回 若成功则为非负描述符，若出错则为-1
```

参数cliaddr和addrlen用来返回已连接的客户的协议地址。addrlen是值-结果参数；调用前，我们将*addrlen值置为由cliaddr所指的套接字地址结构的长度。返回时，该整数值(len)即为由内核存放在该套接字结构内的确切字节数。(len值很可能改变)。

如果accept成功，将返回一个已连接套接字描述符。当服务器完成对某个给定客户的服务时，相应的已连接套接字就被关闭。如果不对客户端信息感兴趣，可以将后面两个参数都置为空。



**6.fork函数**

```c
#include<unisted.h>
pid_t fork(void);//返回：在子进程中为0，在父进程中为子进程ID，若出错则为-1
```

fork的难以理解之处在于调用它一次，它却返回两次。它在父进程中返回一次，返回值是子进程的进程ID号；

在子进程又返回一次，返回值为0。



**7.并发服务器**

采用fork实现的简易并发服务器

```c
pid_t pid;
int listenfd,connfd;
listenfd = socket(...);
bind(listenfd,...);
listen(listenfd,LISTENQ);

for( ; ; ){
    connfd = accept(listenfd,...);
    if(pid = fork()==0){
        close(listenfd);/* child closes listening socket */
        doit(connfd);   /* process the request */
        close(connfd);  /* done with this client */ //可以忽略
        exit(0);  		/* child terminates */ //exit会直接关闭connfd
    }
    close(connfd);		/* parent closes connected socket */
}
```

当一个连接建立时，accept返回，服务器接着调用fork,然后由子进程服务客户(通过已连接套接字connfd)，父进程则等待下一个连接(通过监听套接字listenfd)。既然新的客户由子进程提供服务，父进程就关闭已连接套接字。



**8.close函数**

用于关闭套接字，并终止TCP连接。

```c
#include <unistd.h>
int close(int sockfd);//返回： 若成功则为0，若出错则为-1；
```



**9.getsockname和getpeername函数**

getsockname返回与某个套接字关联的本地协议地址，gepeername返回与某个套接字关联的外地协议地址。

```c
#include <sys/socket.h>

int getsockname(int sockfd,struct sockaddr *localaddr,socklen_t *addrlen);

int getpeername(int sockfd, struct sockaddr *peeraddr,socklen_t *addrlen);
//均返回: 若成功则为0，若出错则为-1
//两个函数的最后一个参数都为值-结果参数
```

